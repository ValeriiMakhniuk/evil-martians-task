{"version":3,"sources":["types.ts","constants.ts","validation.ts","components/password-validation-status/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","form.module.css"],"names":["ErrorMessages","passwordValidationStatus","MINIMUM","CONTAINS","ISNUMBER","LOWERCASE","UPPERCASE","initialValues","email","password","validationSchema","Yup","required","min","matches","defaultErrorsObject","Object","keys","reduce","acc","key","validate","values","abortEarly","then","catch","validationError","inner","errAcc","innerError","errors","path","exists","join","Status","isValid","message","PasswordValidationStatus","entries","map","error","includes","App","initialFocusElementRef","React","useRef","formik","useFormik","onSubmit","console","log","useEffect","current","focus","className","form","layout","handleSubmit","data-testid","noValidate","group","role","field","htmlFor","label","type","name","id","value","onChange","handleChange","onBlur","handleBlur","autoComplete","cn","input","input_type_error","touched","ref","split","submit","disabled","dirty","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.dac3a8ed.chunk.js","sourcesContent":["export enum ErrorMessages {\n  UPPERCASE = \"uppercase\",\n  LOWERCASE = \"lowercase\",\n  ISNUMBER = \"number\",\n  CONTAINS = \"conatins\",\n  MINIMUM = \"min\",\n}\n\nexport type TInitialValues = {\n  email: string;\n  password: string;\n};\n","import { ErrorMessages } from \"./types\";\n\nexport const ERROR_MESSAGES_DELIMETER = \"_\";\nexport const MIN_PASSWORD_LENTGH = 8;\n\nexport const passwordValidationStatus: Record<ErrorMessages, string> = {\n  [ErrorMessages.MINIMUM]: \"more than 7 characters\",\n  [ErrorMessages.CONTAINS]: \"special character\",\n  [ErrorMessages.ISNUMBER]: \"number\",\n  [ErrorMessages.LOWERCASE]: \"lowercase character\",\n  [ErrorMessages.UPPERCASE]: \"uppercase character\",\n};\n\nexport const initialValues = {\n  email: \"\",\n  password: \"\",\n};\n","import { FormikErrors } from \"formik\";\nimport * as Yup from \"yup\";\nimport { ERROR_MESSAGES_DELIMETER, initialValues } from \"./constants\";\nimport { ErrorMessages, TInitialValues } from \"./types\";\n\ntype ReturnType =\n  | void\n  | object\n  | Promise<FormikErrors<TInitialValues>>\n  | undefined;\n\nexport const validationSchema = Yup.object({\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  password: Yup.string()\n    .min(8, ErrorMessages.MINIMUM)\n    .matches(/[A-Z]/, ErrorMessages.UPPERCASE)\n    .matches(/[a-z]/, ErrorMessages.LOWERCASE)\n    .matches(/[0-9]/, ErrorMessages.ISNUMBER)\n    .matches(/[^A-Za-z0-9]/, ErrorMessages.CONTAINS),\n});\n\nconst defaultErrorsObject: Record<keyof typeof initialValues, null> | {} =\n  Object.keys(initialValues).reduce(\n    (acc, key) => ({ ...acc, [key]: null }),\n    {}\n  );\n\nexport const validate = (values: TInitialValues): ReturnType => {\n  return validationSchema\n    .validate(values, { abortEarly: false })\n    .then(() => null)\n    .catch((validationError: Yup.ValidationError) => {\n      return validationError.inner.reduce<Record<string, string>>(\n        (errAcc, innerError) => {\n          const { errors, path: key } = innerError;\n\n          if (!key) {\n            return errAcc;\n          }\n\n          const exists = errAcc[key];\n\n          return {\n            ...errAcc,\n            [key]: `${errors.join(ERROR_MESSAGES_DELIMETER)}${\n              !!exists ? `${ERROR_MESSAGES_DELIMETER}${exists}` : \"\"\n            }`,\n          };\n        },\n        defaultErrorsObject\n      );\n    });\n};\n","import React from \"react\";\nimport { passwordValidationStatus } from \"../../constants\";\n\ninterface IProps {\n  errors: string[] | undefined;\n}\n\ninterface IStepProps {\n  isValid: boolean;\n  message: string;\n}\n\nconst Status: React.FC<IStepProps> = ({ isValid, message }) => {\n  return (\n    <div>\n      <span>{isValid && \"âœ…\"}</span>\n      {message}\n    </div>\n  );\n};\n\nexport const PasswordValidationStatus: React.FC<IProps> = ({ errors }) => {\n  return (\n    <div>\n      contains:\n      <ul>\n        {Object.entries(passwordValidationStatus).map(([error, message]) => {\n          return (\n            <li key={error}>\n              <Status message={message} isValid={!errors?.includes(error)} />\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFormik } from \"formik\";\nimport cn from \"classnames\";\n\nimport form from \"./form.module.css\";\n\nimport { ERROR_MESSAGES_DELIMETER, initialValues } from \"./constants\";\nimport { validate, validationSchema } from \"./validation\";\n\nimport { PasswordValidationStatus } from \"./components/password-validation-status\";\n\nfunction App() {\n  const initialFocusElementRef = React.useRef<HTMLInputElement>(null);\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    validate: validate,\n    onSubmit: console.log,\n  });\n\n  React.useEffect(() => {\n    initialFocusElementRef.current?.focus();\n  }, []);\n\n  return (\n    <main className=\"layout\">\n      <div className={form.layout}>\n        <h1 className=\"page-title\">Log in</h1>\n        <form\n          className={form.form}\n          onSubmit={formik.handleSubmit}\n          data-testid=\"login-form\"\n          noValidate\n        >\n          <ul className={form.group} role=\"none\">\n            <li className={form.field}>\n              <label htmlFor=\"email\" className={form.label}>\n                Email\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                autoComplete=\"email\"\n                className={cn(form.input, {\n                  [form.input_type_error]:\n                    !!formik.errors.email && formik.touched.email,\n                })}\n                ref={initialFocusElementRef}\n              />\n              {/* {formik.touched.email && formik.errors.email} */}\n            </li>\n            <li className={form.field}>\n              <label htmlFor=\"password\" className={form.label}>\n                Password\n              </label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                autoComplete=\"password\"\n                className={form.input}\n              />\n              <PasswordValidationStatus\n                errors={formik.errors.password?.split(ERROR_MESSAGES_DELIMETER)}\n              />\n            </li>\n          </ul>\n          <button\n            className={form.submit}\n            type=\"submit\"\n            disabled={!formik.dirty || !formik.isValid}\n          >\n            Log In\n          </button>\n        </form>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"form_layout__WTe82\",\"form\":\"form_form__3KzI0\",\"group\":\"form_group__qtTtp\",\"label\":\"form_label__4HdUQ\",\"field\":\"form_field__28uxp\",\"input\":\"form_input__w5D0Y\",\"input_type_error\":\"form_input_type_error__3Y0J4\",\"submit\":\"form_submit__3Jd8L\"};"],"sourceRoot":""}